// Generated by dts-bundle v0.7.2
// Dependencies for this module:
//   ../zxcvbn-typescript/matching/interfaces

declare module 'zxcvbn-typescript' {
    import { Matching } from "zxcvbn-typescript/matching";
    import { IScoringResult } from "zxcvbn-typescript/scoring/interfaces";
    export interface IResult extends IScoringResult {
        feedback: string;
        calc_time: number;
    }
    export class Zxcvbn {
        static matching: Matching;
        static config: {
            frequencyList: string;
        };
        /**
          * Checks the strength of a password
          * @param password password to check
          * @param userInputs additional dictionary information
          */
        static check(password: string, userInputs?: Array<string>): IResult;
    }
}

declare module 'zxcvbn-typescript/matching' {
    import { IMatch } from "zxcvbn-typescript/matching/interfaces";
    export class Matching {
            constructor(frequencyList?: {
                    [key: string]: string;
            });
            /**
                * Appends the user input to the dictionaries
                * @param orderedList A list of ordered words
                */
            setUserInputDictionary(orderedList: string[]): {
                    [word: string]: number;
            };
            /**
                * Runs all passwords matches
                * @param password password to match with
                */
            omnimatch(password: string): Array<IMatch>;
    }
}

declare module 'zxcvbn-typescript/scoring/interfaces' {
    import { IMatch } from "zxcvbn-typescript/matching/interfaces";
    export interface IScoringResult {
        password: string;
        sequence: Array<IMatch>;
        guesses: number;
        guessesLog10: number;
    }
    export interface ICalculator {
        estimate: (match: IMatch) => number;
    }
}

declare module 'zxcvbn-typescript/matching/interfaces' {
    export interface IMatch {
        pattern: "bruteforce" | "date" | "dictionary" | "regex" | "repeat" | "spatial" | "sequence";
        i: number;
        j: number;
        token: string;
        guesses?: number;
        guessesLog10?: number;
    }
    export interface IMatcher {
        match: (password: string) => Array<IMatch>;
    }
    export interface IRankedDictionaries {
        [name: string]: {
            [word: string]: number;
        };
    }
}

